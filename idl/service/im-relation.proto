syntax = "proto3";

package imrelation;
option go_package = "service/imrelation";

import "base/base.proto";

message CreateGroupReq {
  base.SessionEntry session = 1;
  string echo_code = 2;
};

message CreateGroupResp {
  string group_id = 1;
  int64 create_at = 2;
};

message RelationEntry {
  enum RelationStatus {
    UNUSED = 0;
    NOT_IN_GROUP = 1;
    OWNER = 2;
    MEMBER = 3;
  };
  string user_id = 1;
  string group_id = 2;
  int64 relation_version = 3;
  RelationStatus status = 4;
  
  int64 updated_at = 5;
}

message GroupInfo {
  string group_id = 2;
  string owner_id = 3;
  int64 create_at = 4;
  bool disbanded = 5;
  int64 disbaned_at = 6;
  repeated RelationEntry relations = 7;
}

message GetGroupInfoReq {
  base.SessionEntry session = 1;
  string echo_code = 2;
  string group_id = 3;
  GroupInfo info = 4;
}

message GetGroupInfoResp {
  bool exists = 1;
  GroupInfo info = 2;
}

// 拉全量关系
message FetchAllRelationsReq {
  base.SessionEntry session = 1;
  string echo_code = 2;
}

message FetchAllRelationsResp {
  repeated RelationEntry relations = 1;
}

// 申请加入群
message ApplyGroupReq {
  base.SessionEntry session = 1;
  string echo_code = 2;
  string group_id = 4;
  // 申请理由
  string apply_msg = 5;
}

message ApplyGroupResp {
  enum ApplyGroupRespCode {
    OK = 0;
    GROUP_DISBANDED = 1;
    USER_IN_GROUP = 2;
    NO_GROUP = 3;
  }

  ApplyGroupRespCode code = 1;
}

message ApplyEntry {
  enum ApplyStatus {
    UNUSED = 0;
    NONE = 1;
    PENDING = 2;
    ACCEPTED = 3;
    REJECTED = 4;
    GROUP_DISBANDED = 5;
  };
  string user_id = 1;
  string group_id = 2;
  int64 apply_version = 3;
  int64 apply_at = 4;
  string apply_msg = 5;
  ApplyStatus status = 6;
}

message FetchAllApplicationsReq {
  base.SessionEntry session = 1;
  string echo_code = 2;
}

message FetchAllApplicationsResp {
  repeated ApplyEntry applications = 1;
}

message HandleApplyReq {
  base.SessionEntry session = 1;
  string echo_code = 2;
  string user_id = 3;
  string group_id = 4;
  bool accept = 5;
}

message HandleApplyResp {
  enum HandleApplyRespCode {
    OK = 0;
    NO_PERMISSION = 1;
    NO_APPLY = 2; // 申请不存在, 或者申请不是pending状态
    NO_GROUP = 3;
    GROUP_DISBANDED = 4;
  }

  HandleApplyRespCode code = 1;
  
  // 一个人关于一个群的关系, 是递增的, 每次被踢/加入都会+1
  int64 relation_version = 2;
  string apply_msg = 3;
  int64 apply_at = 4;
  int64 apply_version = 5;
  int64 handle_at = 6;
}

message QuitGroupReq {
  base.SessionEntry session = 1;
  string echo_code = 2;
  string group_id = 3;
}

message QuitGroupResp {
  enum HandleApplyRespCode {
    OK = 0;
    NO_MEMBER = 1;
  }
  HandleApplyRespCode code = 1;
  int64 relation_version = 2;
}

service IMRelation {
  // im-relay调用, 创建群
  rpc CreateGroup(CreateGroupReq) returns (CreateGroupResp);
  // im-relay调用, 获取群信息, 确认群是存在的, 如果不存在就不一致性hash定位群了
  rpc GetGroupInfo(GetGroupInfoReq) returns (GetGroupInfoResp);
  // im-relay调用, 拉全量关系, 用于客户端登录后拉取全量关系
  rpc FetchAllRelations(FetchAllRelationsReq) returns (FetchAllRelationsResp);
  // im-relay调用, 拉全量申请, 用户客户端登录上拉取全量申请
  rpc FetchAllApplications(FetchAllApplicationsReq) returns (FetchAllApplicationsResp);
  // im-relay调用, 申请加入群
  rpc ApplyGroup(ApplyGroupReq) returns (ApplyGroupResp);
  // im-relay调用, 处理申请
  rpc HandleApply(HandleApplyReq) returns (HandleApplyResp);
  // im-relay调用, 退出群
  rpc QuitGroup(QuitGroupReq) returns (QuitGroupResp);
}
