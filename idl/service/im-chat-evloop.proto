syntax = "proto3";


package imchatevloop;
option go_package = "service/imchatevloop";

import "base/base.proto";
import "base/evloopio.proto";

// 创建群组, 由im-relation调用
message CreateGroupRequest {
  int64 version = 1;
  string groupId = 2;
  string group_owner_id = 3;
}

message CreateGroupResponse {
  bool success = 1;
  int64 version = 2;
  int64 created_at = 3;
}

message UniversalGroupEvloopRequestReq {
  int64 version = 1;
  string group_id = 2;
  evloopio.UniversalGroupEvloopInput input = 3;
}

message UniversalGroupEvloopRequestResp {
  bool success = 1;
  int64 version = 2;
  evloopio.UniversalGroupEvloopOutput output = 3;
}

// 迁移相关, 幂等接口可以重复调用
message DoMigrateReq {
  string group_id = 1;
}

message DoMigrateResp {
  message RelationInfo {
    base.RelationEntry relation = 1;
  }

  message UserSubscribeEntry {
    message SubscribeEntry {
      int64 on_sub_relation_version = 1;
      base.SessionEntry session = 2;
    }
    repeated SubscribeEntry entries = 1;
  }

  bool ok = 1;
  string group_id = 2;
  string owner_id = 3;
  int64 created_at = 4;
  int64 seq_id = 5;
  map<string, RelationInfo> relations = 6;
  map<string, UserSubscribeEntry> subscribers = 7;
}

message MigrateDoneReq {
  string group_id = 1;
}

message MigrateDoneResp {
  bool ok = 1;
};

service IMChatEvloop {
  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse);
  rpc UniversalGroupEvloopRequest(UniversalGroupEvloopRequestReq) returns (UniversalGroupEvloopRequestResp);

  // 迁移相关

  // DoMigrate接口, 幂等接口, 将eventloop的状态变为迁移中
  rpc DoMigrate(DoMigrateReq) returns (DoMigrateResp);

  // MigrateDone接口, 幂等接口, 将eventloop的状态变为迁移完成, 停止eventloop, 移除map
  rpc MigrateDone(MigrateDoneReq) returns (MigrateDoneResp);
}