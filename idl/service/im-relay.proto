syntax = "proto3";

package imrelay;
option go_package = "service/imrelay";

import "base/base.proto";
import "base/evloopio.proto";

message BizMessageReq {
  base.SessionEntry session = 1;
  string biz = 2;
  string echo_code = 3;
  bytes data = 4;
}

message BizMessageResp {};

message CreateChatEventLoopReq {
  string group_id = 1;
  string owner_id = 2;
};

// 当config version对不上自己的配置的时候, 需要让im-relay自己更新config, 然后重新发起rpc
message CreateChatEventLoopResp {
  bool success = 1;
};

// 将消息重定向到event loop中, 并且获得响应, 调用这个接口的前期是保证这个group_id存在 
message RedirectToChatEventLoopReq {
  string group_id = 1;
  evloopio.UniversalGroupEvloopInput input = 2;
};

message RedirectToChatEventLoopResp {
  // 理论上这个success是true, 如果不是应该立马报错
  bool success = 1;
  evloopio.UniversalGroupEvloopOutput output = 2;
};

message GetLastVersionConfigReq {
  string group_id = 1;
}

message GetLastVersionConfigResp {
  string EvloopServerAddrPort = 1;
}

service IMRelay {
  rpc BizMessage(BizMessageReq) returns (BizMessageResp);

  // 一致性hash定位event loop server, 创建event loop
  rpc CreateChatEventLoop(CreateChatEventLoopReq) returns(CreateChatEventLoopResp);
  // 将消息重定向到event loop中, 并且获得响应
  rpc RedirectToChatEventLoop(RedirectToChatEventLoopReq) returns (RedirectToChatEventLoopResp);
  // 获取上一个版本的event loop server的地址, 迁移eventloop使用
  rpc GetLastVersionConfig(GetLastVersionConfigReq) returns (GetLastVersionConfigResp);
}
