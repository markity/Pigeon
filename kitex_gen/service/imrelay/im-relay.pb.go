// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: service/im-relay.proto

package imrelay

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	base "pigeon/kitex_gen/service/base"
	evloopio "pigeon/kitex_gen/service/evloopio"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BizMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session  *base.SessionEntry `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Biz      string             `protobuf:"bytes,2,opt,name=biz,proto3" json:"biz,omitempty"`
	EchoCode string             `protobuf:"bytes,3,opt,name=echo_code,json=echoCode,proto3" json:"echo_code,omitempty"`
	Data     []byte             `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BizMessageReq) Reset() {
	*x = BizMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relay_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizMessageReq) ProtoMessage() {}

func (x *BizMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relay_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizMessageReq.ProtoReflect.Descriptor instead.
func (*BizMessageReq) Descriptor() ([]byte, []int) {
	return file_service_im_relay_proto_rawDescGZIP(), []int{0}
}

func (x *BizMessageReq) GetSession() *base.SessionEntry {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *BizMessageReq) GetBiz() string {
	if x != nil {
		return x.Biz
	}
	return ""
}

func (x *BizMessageReq) GetEchoCode() string {
	if x != nil {
		return x.EchoCode
	}
	return ""
}

func (x *BizMessageReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type BizMessageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BizMessageResp) Reset() {
	*x = BizMessageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relay_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizMessageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizMessageResp) ProtoMessage() {}

func (x *BizMessageResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relay_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizMessageResp.ProtoReflect.Descriptor instead.
func (*BizMessageResp) Descriptor() ([]byte, []int) {
	return file_service_im_relay_proto_rawDescGZIP(), []int{1}
}

type CreateChatEventLoopReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	OwnerId string `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *CreateChatEventLoopReq) Reset() {
	*x = CreateChatEventLoopReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relay_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatEventLoopReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatEventLoopReq) ProtoMessage() {}

func (x *CreateChatEventLoopReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relay_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatEventLoopReq.ProtoReflect.Descriptor instead.
func (*CreateChatEventLoopReq) Descriptor() ([]byte, []int) {
	return file_service_im_relay_proto_rawDescGZIP(), []int{2}
}

func (x *CreateChatEventLoopReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CreateChatEventLoopReq) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

// 当config version对不上自己的配置的时候, 需要让im-relay自己更新config, 然后重新发起rpc
type CreateChatEventLoopResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CreateChatEventLoopResp) Reset() {
	*x = CreateChatEventLoopResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relay_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatEventLoopResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatEventLoopResp) ProtoMessage() {}

func (x *CreateChatEventLoopResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relay_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatEventLoopResp.ProtoReflect.Descriptor instead.
func (*CreateChatEventLoopResp) Descriptor() ([]byte, []int) {
	return file_service_im_relay_proto_rawDescGZIP(), []int{3}
}

func (x *CreateChatEventLoopResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 将消息重定向到event loop中, 并且获得响应, 调用这个接口的前期是保证这个group_id存在
type RedirectToChatEventLoopReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string                              `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Input   *evloopio.UniversalGroupEvloopInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *RedirectToChatEventLoopReq) Reset() {
	*x = RedirectToChatEventLoopReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relay_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectToChatEventLoopReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectToChatEventLoopReq) ProtoMessage() {}

func (x *RedirectToChatEventLoopReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relay_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectToChatEventLoopReq.ProtoReflect.Descriptor instead.
func (*RedirectToChatEventLoopReq) Descriptor() ([]byte, []int) {
	return file_service_im_relay_proto_rawDescGZIP(), []int{4}
}

func (x *RedirectToChatEventLoopReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *RedirectToChatEventLoopReq) GetInput() *evloopio.UniversalGroupEvloopInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type RedirectToChatEventLoopResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 理论上这个success是true, 如果不是应该立马报错
	Success bool                                 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Output  *evloopio.UniversalGroupEvloopOutput `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *RedirectToChatEventLoopResp) Reset() {
	*x = RedirectToChatEventLoopResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relay_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectToChatEventLoopResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectToChatEventLoopResp) ProtoMessage() {}

func (x *RedirectToChatEventLoopResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relay_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectToChatEventLoopResp.ProtoReflect.Descriptor instead.
func (*RedirectToChatEventLoopResp) Descriptor() ([]byte, []int) {
	return file_service_im_relay_proto_rawDescGZIP(), []int{5}
}

func (x *RedirectToChatEventLoopResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RedirectToChatEventLoopResp) GetOutput() *evloopio.UniversalGroupEvloopOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

type GetLastVersionConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *GetLastVersionConfigReq) Reset() {
	*x = GetLastVersionConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relay_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastVersionConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastVersionConfigReq) ProtoMessage() {}

func (x *GetLastVersionConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relay_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastVersionConfigReq.ProtoReflect.Descriptor instead.
func (*GetLastVersionConfigReq) Descriptor() ([]byte, []int) {
	return file_service_im_relay_proto_rawDescGZIP(), []int{6}
}

func (x *GetLastVersionConfigReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type GetLastVersionConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvloopServerAddrPort string `protobuf:"bytes,1,opt,name=EvloopServerAddrPort,proto3" json:"EvloopServerAddrPort,omitempty"`
}

func (x *GetLastVersionConfigResp) Reset() {
	*x = GetLastVersionConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relay_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastVersionConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastVersionConfigResp) ProtoMessage() {}

func (x *GetLastVersionConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relay_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastVersionConfigResp.ProtoReflect.Descriptor instead.
func (*GetLastVersionConfigResp) Descriptor() ([]byte, []int) {
	return file_service_im_relay_proto_rawDescGZIP(), []int{7}
}

func (x *GetLastVersionConfigResp) GetEvloopServerAddrPort() string {
	if x != nil {
		return x.EvloopServerAddrPort
	}
	return ""
}

var File_service_im_relay_proto protoreflect.FileDescriptor

var file_service_im_relay_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6d, 0x2d, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x1a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x65, 0x76, 0x6c, 0x6f, 0x6f, 0x70, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x42, 0x69, 0x7a, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x7a, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x7a, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x63, 0x68,
	0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x63,
	0x68, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x10, 0x0a, 0x0e, 0x42, 0x69,
	0x7a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4e, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x72, 0x0a, 0x1a, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x43,
	0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x76, 0x6c, 0x6f,
	0x6f, 0x70, 0x69, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x76, 0x6c, 0x6f, 0x6f, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x75, 0x0a, 0x1b, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x65, 0x76, 0x6c, 0x6f, 0x6f, 0x70, 0x69, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x76, 0x6c, 0x6f, 0x6f, 0x70, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x34, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x4e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32,
	0x0a, 0x14, 0x45, 0x76, 0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x45, 0x76,
	0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x32, 0xe5, 0x02, 0x0a, 0x07, 0x49, 0x4d, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3d,
	0x0a, 0x0a, 0x42, 0x69, 0x7a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x69,
	0x6d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x42, 0x69, 0x7a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x42,
	0x69, 0x7a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x1f, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x17, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x6f, 0x70, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x42, 0x22, 0x5a, 0x20, 0x70, 0x69,
	0x67, 0x65, 0x6f, 0x6e, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_im_relay_proto_rawDescOnce sync.Once
	file_service_im_relay_proto_rawDescData = file_service_im_relay_proto_rawDesc
)

func file_service_im_relay_proto_rawDescGZIP() []byte {
	file_service_im_relay_proto_rawDescOnce.Do(func() {
		file_service_im_relay_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_im_relay_proto_rawDescData)
	})
	return file_service_im_relay_proto_rawDescData
}

var file_service_im_relay_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_service_im_relay_proto_goTypes = []interface{}{
	(*BizMessageReq)(nil),                       // 0: imrelay.BizMessageReq
	(*BizMessageResp)(nil),                      // 1: imrelay.BizMessageResp
	(*CreateChatEventLoopReq)(nil),              // 2: imrelay.CreateChatEventLoopReq
	(*CreateChatEventLoopResp)(nil),             // 3: imrelay.CreateChatEventLoopResp
	(*RedirectToChatEventLoopReq)(nil),          // 4: imrelay.RedirectToChatEventLoopReq
	(*RedirectToChatEventLoopResp)(nil),         // 5: imrelay.RedirectToChatEventLoopResp
	(*GetLastVersionConfigReq)(nil),             // 6: imrelay.GetLastVersionConfigReq
	(*GetLastVersionConfigResp)(nil),            // 7: imrelay.GetLastVersionConfigResp
	(*base.SessionEntry)(nil),                   // 8: base.SessionEntry
	(*evloopio.UniversalGroupEvloopInput)(nil),  // 9: evloopio.UniversalGroupEvloopInput
	(*evloopio.UniversalGroupEvloopOutput)(nil), // 10: evloopio.UniversalGroupEvloopOutput
}
var file_service_im_relay_proto_depIdxs = []int32{
	8,  // 0: imrelay.BizMessageReq.session:type_name -> base.SessionEntry
	9,  // 1: imrelay.RedirectToChatEventLoopReq.input:type_name -> evloopio.UniversalGroupEvloopInput
	10, // 2: imrelay.RedirectToChatEventLoopResp.output:type_name -> evloopio.UniversalGroupEvloopOutput
	0,  // 3: imrelay.IMRelay.BizMessage:input_type -> imrelay.BizMessageReq
	2,  // 4: imrelay.IMRelay.CreateChatEventLoop:input_type -> imrelay.CreateChatEventLoopReq
	4,  // 5: imrelay.IMRelay.RedirectToChatEventLoop:input_type -> imrelay.RedirectToChatEventLoopReq
	6,  // 6: imrelay.IMRelay.GetLastVersionConfig:input_type -> imrelay.GetLastVersionConfigReq
	1,  // 7: imrelay.IMRelay.BizMessage:output_type -> imrelay.BizMessageResp
	3,  // 8: imrelay.IMRelay.CreateChatEventLoop:output_type -> imrelay.CreateChatEventLoopResp
	5,  // 9: imrelay.IMRelay.RedirectToChatEventLoop:output_type -> imrelay.RedirectToChatEventLoopResp
	7,  // 10: imrelay.IMRelay.GetLastVersionConfig:output_type -> imrelay.GetLastVersionConfigResp
	7,  // [7:11] is the sub-list for method output_type
	3,  // [3:7] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_service_im_relay_proto_init() }
func file_service_im_relay_proto_init() {
	if File_service_im_relay_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_im_relay_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relay_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizMessageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relay_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatEventLoopReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relay_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatEventLoopResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relay_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectToChatEventLoopReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relay_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectToChatEventLoopResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relay_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastVersionConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relay_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastVersionConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_im_relay_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_im_relay_proto_goTypes,
		DependencyIndexes: file_service_im_relay_proto_depIdxs,
		MessageInfos:      file_service_im_relay_proto_msgTypes,
	}.Build()
	File_service_im_relay_proto = out.File
	file_service_im_relay_proto_rawDesc = nil
	file_service_im_relay_proto_goTypes = nil
	file_service_im_relay_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.11.3. DO NOT EDIT.

type IMRelay interface {
	BizMessage(ctx context.Context, req *BizMessageReq) (res *BizMessageResp, err error)
	CreateChatEventLoop(ctx context.Context, req *CreateChatEventLoopReq) (res *CreateChatEventLoopResp, err error)
	RedirectToChatEventLoop(ctx context.Context, req *RedirectToChatEventLoopReq) (res *RedirectToChatEventLoopResp, err error)
	GetLastVersionConfig(ctx context.Context, req *GetLastVersionConfigReq) (res *GetLastVersionConfigResp, err error)
}
