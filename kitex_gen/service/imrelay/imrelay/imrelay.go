// Code generated by Kitex v0.9.1. DO NOT EDIT.

package imrelay

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	imrelay "pigeon/kitex_gen/service/imrelay"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"BizMessage": kitex.NewMethodInfo(
		bizMessageHandler,
		newBizMessageArgs,
		newBizMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateChatEventLoop": kitex.NewMethodInfo(
		createChatEventLoopHandler,
		newCreateChatEventLoopArgs,
		newCreateChatEventLoopResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RedirectToChatEventLoop": kitex.NewMethodInfo(
		redirectToChatEventLoopHandler,
		newRedirectToChatEventLoopArgs,
		newRedirectToChatEventLoopResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetLastVersionConfig": kitex.NewMethodInfo(
		getLastVersionConfigHandler,
		newGetLastVersionConfigArgs,
		newGetLastVersionConfigResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	iMRelayServiceInfo                = NewServiceInfo()
	iMRelayServiceInfoForClient       = NewServiceInfoForClient()
	iMRelayServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return iMRelayServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return iMRelayServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return iMRelayServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "IMRelay"
	handlerType := (*imrelay.IMRelay)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "imrelay",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func bizMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(imrelay.BizMessageReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(imrelay.IMRelay).BizMessage(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BizMessageArgs:
		success, err := handler.(imrelay.IMRelay).BizMessage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BizMessageResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBizMessageArgs() interface{} {
	return &BizMessageArgs{}
}

func newBizMessageResult() interface{} {
	return &BizMessageResult{}
}

type BizMessageArgs struct {
	Req *imrelay.BizMessageReq
}

func (p *BizMessageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(imrelay.BizMessageReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BizMessageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BizMessageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BizMessageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BizMessageArgs) Unmarshal(in []byte) error {
	msg := new(imrelay.BizMessageReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BizMessageArgs_Req_DEFAULT *imrelay.BizMessageReq

func (p *BizMessageArgs) GetReq() *imrelay.BizMessageReq {
	if !p.IsSetReq() {
		return BizMessageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BizMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BizMessageArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BizMessageResult struct {
	Success *imrelay.BizMessageResp
}

var BizMessageResult_Success_DEFAULT *imrelay.BizMessageResp

func (p *BizMessageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(imrelay.BizMessageResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BizMessageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BizMessageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BizMessageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BizMessageResult) Unmarshal(in []byte) error {
	msg := new(imrelay.BizMessageResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BizMessageResult) GetSuccess() *imrelay.BizMessageResp {
	if !p.IsSetSuccess() {
		return BizMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BizMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*imrelay.BizMessageResp)
}

func (p *BizMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BizMessageResult) GetResult() interface{} {
	return p.Success
}

func createChatEventLoopHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(imrelay.CreateChatEventLoopReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(imrelay.IMRelay).CreateChatEventLoop(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateChatEventLoopArgs:
		success, err := handler.(imrelay.IMRelay).CreateChatEventLoop(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateChatEventLoopResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateChatEventLoopArgs() interface{} {
	return &CreateChatEventLoopArgs{}
}

func newCreateChatEventLoopResult() interface{} {
	return &CreateChatEventLoopResult{}
}

type CreateChatEventLoopArgs struct {
	Req *imrelay.CreateChatEventLoopReq
}

func (p *CreateChatEventLoopArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(imrelay.CreateChatEventLoopReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateChatEventLoopArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateChatEventLoopArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateChatEventLoopArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateChatEventLoopArgs) Unmarshal(in []byte) error {
	msg := new(imrelay.CreateChatEventLoopReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateChatEventLoopArgs_Req_DEFAULT *imrelay.CreateChatEventLoopReq

func (p *CreateChatEventLoopArgs) GetReq() *imrelay.CreateChatEventLoopReq {
	if !p.IsSetReq() {
		return CreateChatEventLoopArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateChatEventLoopArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateChatEventLoopArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateChatEventLoopResult struct {
	Success *imrelay.CreateChatEventLoopResp
}

var CreateChatEventLoopResult_Success_DEFAULT *imrelay.CreateChatEventLoopResp

func (p *CreateChatEventLoopResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(imrelay.CreateChatEventLoopResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateChatEventLoopResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateChatEventLoopResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateChatEventLoopResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateChatEventLoopResult) Unmarshal(in []byte) error {
	msg := new(imrelay.CreateChatEventLoopResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateChatEventLoopResult) GetSuccess() *imrelay.CreateChatEventLoopResp {
	if !p.IsSetSuccess() {
		return CreateChatEventLoopResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateChatEventLoopResult) SetSuccess(x interface{}) {
	p.Success = x.(*imrelay.CreateChatEventLoopResp)
}

func (p *CreateChatEventLoopResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateChatEventLoopResult) GetResult() interface{} {
	return p.Success
}

func redirectToChatEventLoopHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(imrelay.RedirectToChatEventLoopReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(imrelay.IMRelay).RedirectToChatEventLoop(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RedirectToChatEventLoopArgs:
		success, err := handler.(imrelay.IMRelay).RedirectToChatEventLoop(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RedirectToChatEventLoopResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRedirectToChatEventLoopArgs() interface{} {
	return &RedirectToChatEventLoopArgs{}
}

func newRedirectToChatEventLoopResult() interface{} {
	return &RedirectToChatEventLoopResult{}
}

type RedirectToChatEventLoopArgs struct {
	Req *imrelay.RedirectToChatEventLoopReq
}

func (p *RedirectToChatEventLoopArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(imrelay.RedirectToChatEventLoopReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RedirectToChatEventLoopArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RedirectToChatEventLoopArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RedirectToChatEventLoopArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RedirectToChatEventLoopArgs) Unmarshal(in []byte) error {
	msg := new(imrelay.RedirectToChatEventLoopReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RedirectToChatEventLoopArgs_Req_DEFAULT *imrelay.RedirectToChatEventLoopReq

func (p *RedirectToChatEventLoopArgs) GetReq() *imrelay.RedirectToChatEventLoopReq {
	if !p.IsSetReq() {
		return RedirectToChatEventLoopArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RedirectToChatEventLoopArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RedirectToChatEventLoopArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RedirectToChatEventLoopResult struct {
	Success *imrelay.RedirectToChatEventLoopResp
}

var RedirectToChatEventLoopResult_Success_DEFAULT *imrelay.RedirectToChatEventLoopResp

func (p *RedirectToChatEventLoopResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(imrelay.RedirectToChatEventLoopResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RedirectToChatEventLoopResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RedirectToChatEventLoopResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RedirectToChatEventLoopResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RedirectToChatEventLoopResult) Unmarshal(in []byte) error {
	msg := new(imrelay.RedirectToChatEventLoopResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RedirectToChatEventLoopResult) GetSuccess() *imrelay.RedirectToChatEventLoopResp {
	if !p.IsSetSuccess() {
		return RedirectToChatEventLoopResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RedirectToChatEventLoopResult) SetSuccess(x interface{}) {
	p.Success = x.(*imrelay.RedirectToChatEventLoopResp)
}

func (p *RedirectToChatEventLoopResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RedirectToChatEventLoopResult) GetResult() interface{} {
	return p.Success
}

func getLastVersionConfigHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(imrelay.GetLastVersionConfigReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(imrelay.IMRelay).GetLastVersionConfig(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetLastVersionConfigArgs:
		success, err := handler.(imrelay.IMRelay).GetLastVersionConfig(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLastVersionConfigResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetLastVersionConfigArgs() interface{} {
	return &GetLastVersionConfigArgs{}
}

func newGetLastVersionConfigResult() interface{} {
	return &GetLastVersionConfigResult{}
}

type GetLastVersionConfigArgs struct {
	Req *imrelay.GetLastVersionConfigReq
}

func (p *GetLastVersionConfigArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(imrelay.GetLastVersionConfigReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLastVersionConfigArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLastVersionConfigArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLastVersionConfigArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLastVersionConfigArgs) Unmarshal(in []byte) error {
	msg := new(imrelay.GetLastVersionConfigReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLastVersionConfigArgs_Req_DEFAULT *imrelay.GetLastVersionConfigReq

func (p *GetLastVersionConfigArgs) GetReq() *imrelay.GetLastVersionConfigReq {
	if !p.IsSetReq() {
		return GetLastVersionConfigArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLastVersionConfigArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLastVersionConfigArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLastVersionConfigResult struct {
	Success *imrelay.GetLastVersionConfigResp
}

var GetLastVersionConfigResult_Success_DEFAULT *imrelay.GetLastVersionConfigResp

func (p *GetLastVersionConfigResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(imrelay.GetLastVersionConfigResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLastVersionConfigResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLastVersionConfigResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLastVersionConfigResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLastVersionConfigResult) Unmarshal(in []byte) error {
	msg := new(imrelay.GetLastVersionConfigResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLastVersionConfigResult) GetSuccess() *imrelay.GetLastVersionConfigResp {
	if !p.IsSetSuccess() {
		return GetLastVersionConfigResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLastVersionConfigResult) SetSuccess(x interface{}) {
	p.Success = x.(*imrelay.GetLastVersionConfigResp)
}

func (p *GetLastVersionConfigResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLastVersionConfigResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) BizMessage(ctx context.Context, Req *imrelay.BizMessageReq) (r *imrelay.BizMessageResp, err error) {
	var _args BizMessageArgs
	_args.Req = Req
	var _result BizMessageResult
	if err = p.c.Call(ctx, "BizMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateChatEventLoop(ctx context.Context, Req *imrelay.CreateChatEventLoopReq) (r *imrelay.CreateChatEventLoopResp, err error) {
	var _args CreateChatEventLoopArgs
	_args.Req = Req
	var _result CreateChatEventLoopResult
	if err = p.c.Call(ctx, "CreateChatEventLoop", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RedirectToChatEventLoop(ctx context.Context, Req *imrelay.RedirectToChatEventLoopReq) (r *imrelay.RedirectToChatEventLoopResp, err error) {
	var _args RedirectToChatEventLoopArgs
	_args.Req = Req
	var _result RedirectToChatEventLoopResult
	if err = p.c.Call(ctx, "RedirectToChatEventLoop", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLastVersionConfig(ctx context.Context, Req *imrelay.GetLastVersionConfigReq) (r *imrelay.GetLastVersionConfigResp, err error) {
	var _args GetLastVersionConfigArgs
	_args.Req = Req
	var _result GetLastVersionConfigResult
	if err = p.c.Call(ctx, "GetLastVersionConfig", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
