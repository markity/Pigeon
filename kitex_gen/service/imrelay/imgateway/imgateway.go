// Code generated by Kitex v0.9.1. DO NOT EDIT.

package imgateway

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	imrelay "pigeon/kitex_gen/service/imrelay"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"BizMessage": kitex.NewMethodInfo(
		bizMessageHandler,
		newBizMessageArgs,
		newBizMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	iMGatewayServiceInfo                = NewServiceInfo()
	iMGatewayServiceInfoForClient       = NewServiceInfoForClient()
	iMGatewayServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return iMGatewayServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return iMGatewayServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return iMGatewayServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "IMGateway"
	handlerType := (*imrelay.IMGateway)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "imrelay",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func bizMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(imrelay.BizMessageReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(imrelay.IMGateway).BizMessage(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BizMessageArgs:
		success, err := handler.(imrelay.IMGateway).BizMessage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BizMessageResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBizMessageArgs() interface{} {
	return &BizMessageArgs{}
}

func newBizMessageResult() interface{} {
	return &BizMessageResult{}
}

type BizMessageArgs struct {
	Req *imrelay.BizMessageReq
}

func (p *BizMessageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(imrelay.BizMessageReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BizMessageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BizMessageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BizMessageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BizMessageArgs) Unmarshal(in []byte) error {
	msg := new(imrelay.BizMessageReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BizMessageArgs_Req_DEFAULT *imrelay.BizMessageReq

func (p *BizMessageArgs) GetReq() *imrelay.BizMessageReq {
	if !p.IsSetReq() {
		return BizMessageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BizMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BizMessageArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BizMessageResult struct {
	Success *imrelay.BizMessageResp
}

var BizMessageResult_Success_DEFAULT *imrelay.BizMessageResp

func (p *BizMessageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(imrelay.BizMessageResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BizMessageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BizMessageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BizMessageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BizMessageResult) Unmarshal(in []byte) error {
	msg := new(imrelay.BizMessageResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BizMessageResult) GetSuccess() *imrelay.BizMessageResp {
	if !p.IsSetSuccess() {
		return BizMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BizMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*imrelay.BizMessageResp)
}

func (p *BizMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BizMessageResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) BizMessage(ctx context.Context, Req *imrelay.BizMessageReq) (r *imrelay.BizMessageResp, err error) {
	var _args BizMessageArgs
	_args.Req = Req
	var _result BizMessageResult
	if err = p.c.Call(ctx, "BizMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
