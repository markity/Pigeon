// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package base

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Empty) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *SessionEntry) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SessionEntry[number], err)
}

func (x *SessionEntry) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.LoginAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SessionEntry) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SessionEntry) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SessionId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SessionEntry) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.DeviceDesc, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SessionEntry) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.GwAdvertiseAddrport, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RelationEntry) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RelationEntry[number], err)
}

func (x *RelationEntry) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.GroupId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RelationEntry) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RelationEntry) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = RelationStatus(v)
	return offset, nil
}

func (x *RelationEntry) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ChangeType = RelationChangeType(v)
	return offset, nil
}

func (x *RelationEntry) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.RelationVersion, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RelationEntry) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.ChangeAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ApplyEntry) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ApplyEntry[number], err)
}

func (x *ApplyEntry) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ApplyEntry) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.GroupId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ApplyEntry) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ApplyVersion, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ApplyEntry) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ApplyAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ApplyEntry) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ApplyMsg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ApplyEntry) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = ApplyStatus(v)
	return offset, nil
}

func (x *Empty) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *SessionEntry) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *SessionEntry) fastWriteField1(buf []byte) (offset int) {
	if x.LoginAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetLoginAt())
	return offset
}

func (x *SessionEntry) fastWriteField2(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUsername())
	return offset
}

func (x *SessionEntry) fastWriteField3(buf []byte) (offset int) {
	if x.SessionId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSessionId())
	return offset
}

func (x *SessionEntry) fastWriteField4(buf []byte) (offset int) {
	if x.DeviceDesc == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDeviceDesc())
	return offset
}

func (x *SessionEntry) fastWriteField5(buf []byte) (offset int) {
	if x.GwAdvertiseAddrport == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetGwAdvertiseAddrport())
	return offset
}

func (x *RelationEntry) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *RelationEntry) fastWriteField1(buf []byte) (offset int) {
	if x.GroupId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetGroupId())
	return offset
}

func (x *RelationEntry) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *RelationEntry) fastWriteField3(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetStatus()))
	return offset
}

func (x *RelationEntry) fastWriteField4(buf []byte) (offset int) {
	if x.ChangeType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetChangeType()))
	return offset
}

func (x *RelationEntry) fastWriteField5(buf []byte) (offset int) {
	if x.RelationVersion == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetRelationVersion())
	return offset
}

func (x *RelationEntry) fastWriteField6(buf []byte) (offset int) {
	if x.ChangeAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetChangeAt())
	return offset
}

func (x *ApplyEntry) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *ApplyEntry) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *ApplyEntry) fastWriteField2(buf []byte) (offset int) {
	if x.GroupId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetGroupId())
	return offset
}

func (x *ApplyEntry) fastWriteField3(buf []byte) (offset int) {
	if x.ApplyVersion == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetApplyVersion())
	return offset
}

func (x *ApplyEntry) fastWriteField4(buf []byte) (offset int) {
	if x.ApplyAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetApplyAt())
	return offset
}

func (x *ApplyEntry) fastWriteField5(buf []byte) (offset int) {
	if x.ApplyMsg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetApplyMsg())
	return offset
}

func (x *ApplyEntry) fastWriteField6(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, int32(x.GetStatus()))
	return offset
}

func (x *Empty) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *SessionEntry) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *SessionEntry) sizeField1() (n int) {
	if x.LoginAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetLoginAt())
	return n
}

func (x *SessionEntry) sizeField2() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUsername())
	return n
}

func (x *SessionEntry) sizeField3() (n int) {
	if x.SessionId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSessionId())
	return n
}

func (x *SessionEntry) sizeField4() (n int) {
	if x.DeviceDesc == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDeviceDesc())
	return n
}

func (x *SessionEntry) sizeField5() (n int) {
	if x.GwAdvertiseAddrport == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetGwAdvertiseAddrport())
	return n
}

func (x *RelationEntry) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *RelationEntry) sizeField1() (n int) {
	if x.GroupId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetGroupId())
	return n
}

func (x *RelationEntry) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *RelationEntry) sizeField3() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetStatus()))
	return n
}

func (x *RelationEntry) sizeField4() (n int) {
	if x.ChangeType == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetChangeType()))
	return n
}

func (x *RelationEntry) sizeField5() (n int) {
	if x.RelationVersion == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetRelationVersion())
	return n
}

func (x *RelationEntry) sizeField6() (n int) {
	if x.ChangeAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetChangeAt())
	return n
}

func (x *ApplyEntry) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *ApplyEntry) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *ApplyEntry) sizeField2() (n int) {
	if x.GroupId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetGroupId())
	return n
}

func (x *ApplyEntry) sizeField3() (n int) {
	if x.ApplyVersion == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetApplyVersion())
	return n
}

func (x *ApplyEntry) sizeField4() (n int) {
	if x.ApplyAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetApplyAt())
	return n
}

func (x *ApplyEntry) sizeField5() (n int) {
	if x.ApplyMsg == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetApplyMsg())
	return n
}

func (x *ApplyEntry) sizeField6() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, int32(x.GetStatus()))
	return n
}

var fieldIDToName_Empty = map[int32]string{}

var fieldIDToName_SessionEntry = map[int32]string{
	1: "LoginAt",
	2: "Username",
	3: "SessionId",
	4: "DeviceDesc",
	5: "GwAdvertiseAddrport",
}

var fieldIDToName_RelationEntry = map[int32]string{
	1: "GroupId",
	2: "UserId",
	3: "Status",
	4: "ChangeType",
	5: "RelationVersion",
	6: "ChangeAt",
}

var fieldIDToName_ApplyEntry = map[int32]string{
	1: "UserId",
	2: "GroupId",
	3: "ApplyVersion",
	4: "ApplyAt",
	5: "ApplyMsg",
	6: "Status",
}
