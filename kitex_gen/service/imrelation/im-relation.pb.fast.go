// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package imrelation

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	base "pigeon/kitex_gen/service/base"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *CreateGroupReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateGroupReq[number], err)
}

func (x *CreateGroupReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v base.SessionEntry
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Session = &v
	return offset, nil
}

func (x *CreateGroupResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateGroupResp[number], err)
}

func (x *CreateGroupResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.GroupId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateGroupReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateGroupReq) fastWriteField1(buf []byte) (offset int) {
	if x.Session == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSession())
	return offset
}

func (x *CreateGroupResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateGroupResp) fastWriteField1(buf []byte) (offset int) {
	if x.GroupId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetGroupId())
	return offset
}

func (x *CreateGroupReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateGroupReq) sizeField1() (n int) {
	if x.Session == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSession())
	return n
}

func (x *CreateGroupResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateGroupResp) sizeField1() (n int) {
	if x.GroupId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetGroupId())
	return n
}

var fieldIDToName_CreateGroupReq = map[int32]string{
	1: "Session",
}

var fieldIDToName_CreateGroupResp = map[int32]string{
	1: "GroupId",
}

var _ = base.File_base_base_proto
