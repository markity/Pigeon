// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.28.2
// source: service/im-relation.proto

package imrelation

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	base "pigeon/kitex_gen/service/base"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApplyGroupResp_ApplyGroupRespCode int32

const (
	ApplyGroupResp_OK              ApplyGroupResp_ApplyGroupRespCode = 0
	ApplyGroupResp_GROUP_DISBANDED ApplyGroupResp_ApplyGroupRespCode = 1
	ApplyGroupResp_USER_IN_GROUP   ApplyGroupResp_ApplyGroupRespCode = 2
	ApplyGroupResp_NO_GROUP        ApplyGroupResp_ApplyGroupRespCode = 3
)

// Enum value maps for ApplyGroupResp_ApplyGroupRespCode.
var (
	ApplyGroupResp_ApplyGroupRespCode_name = map[int32]string{
		0: "OK",
		1: "GROUP_DISBANDED",
		2: "USER_IN_GROUP",
		3: "NO_GROUP",
	}
	ApplyGroupResp_ApplyGroupRespCode_value = map[string]int32{
		"OK":              0,
		"GROUP_DISBANDED": 1,
		"USER_IN_GROUP":   2,
		"NO_GROUP":        3,
	}
)

func (x ApplyGroupResp_ApplyGroupRespCode) Enum() *ApplyGroupResp_ApplyGroupRespCode {
	p := new(ApplyGroupResp_ApplyGroupRespCode)
	*p = x
	return p
}

func (x ApplyGroupResp_ApplyGroupRespCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplyGroupResp_ApplyGroupRespCode) Descriptor() protoreflect.EnumDescriptor {
	return file_service_im_relation_proto_enumTypes[0].Descriptor()
}

func (ApplyGroupResp_ApplyGroupRespCode) Type() protoreflect.EnumType {
	return &file_service_im_relation_proto_enumTypes[0]
}

func (x ApplyGroupResp_ApplyGroupRespCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplyGroupResp_ApplyGroupRespCode.Descriptor instead.
func (ApplyGroupResp_ApplyGroupRespCode) EnumDescriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{9, 0}
}

type ApplyEntry_ApplyStatus int32

const (
	ApplyEntry_PENDING         ApplyEntry_ApplyStatus = 0
	ApplyEntry_ACCEPTED        ApplyEntry_ApplyStatus = 1
	ApplyEntry_REJECTED        ApplyEntry_ApplyStatus = 2
	ApplyEntry_GROUP_DISBANDED ApplyEntry_ApplyStatus = 3
)

// Enum value maps for ApplyEntry_ApplyStatus.
var (
	ApplyEntry_ApplyStatus_name = map[int32]string{
		0: "PENDING",
		1: "ACCEPTED",
		2: "REJECTED",
		3: "GROUP_DISBANDED",
	}
	ApplyEntry_ApplyStatus_value = map[string]int32{
		"PENDING":         0,
		"ACCEPTED":        1,
		"REJECTED":        2,
		"GROUP_DISBANDED": 3,
	}
)

func (x ApplyEntry_ApplyStatus) Enum() *ApplyEntry_ApplyStatus {
	p := new(ApplyEntry_ApplyStatus)
	*p = x
	return p
}

func (x ApplyEntry_ApplyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplyEntry_ApplyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_service_im_relation_proto_enumTypes[1].Descriptor()
}

func (ApplyEntry_ApplyStatus) Type() protoreflect.EnumType {
	return &file_service_im_relation_proto_enumTypes[1]
}

func (x ApplyEntry_ApplyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplyEntry_ApplyStatus.Descriptor instead.
func (ApplyEntry_ApplyStatus) EnumDescriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{10, 0}
}

type HandleApplyResp_HandleApplyRespCode int32

const (
	HandleApplyResp_OK              HandleApplyResp_HandleApplyRespCode = 0
	HandleApplyResp_NO_PERMISSION   HandleApplyResp_HandleApplyRespCode = 1
	HandleApplyResp_NO_APPLY        HandleApplyResp_HandleApplyRespCode = 2 // 申请不存在, 或者申请不是pending状态
	HandleApplyResp_NO_GROUP        HandleApplyResp_HandleApplyRespCode = 3
	HandleApplyResp_GROUP_DISBANDED HandleApplyResp_HandleApplyRespCode = 4
)

// Enum value maps for HandleApplyResp_HandleApplyRespCode.
var (
	HandleApplyResp_HandleApplyRespCode_name = map[int32]string{
		0: "OK",
		1: "NO_PERMISSION",
		2: "NO_APPLY",
		3: "NO_GROUP",
		4: "GROUP_DISBANDED",
	}
	HandleApplyResp_HandleApplyRespCode_value = map[string]int32{
		"OK":              0,
		"NO_PERMISSION":   1,
		"NO_APPLY":        2,
		"NO_GROUP":        3,
		"GROUP_DISBANDED": 4,
	}
)

func (x HandleApplyResp_HandleApplyRespCode) Enum() *HandleApplyResp_HandleApplyRespCode {
	p := new(HandleApplyResp_HandleApplyRespCode)
	*p = x
	return p
}

func (x HandleApplyResp_HandleApplyRespCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandleApplyResp_HandleApplyRespCode) Descriptor() protoreflect.EnumDescriptor {
	return file_service_im_relation_proto_enumTypes[2].Descriptor()
}

func (HandleApplyResp_HandleApplyRespCode) Type() protoreflect.EnumType {
	return &file_service_im_relation_proto_enumTypes[2]
}

func (x HandleApplyResp_HandleApplyRespCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandleApplyResp_HandleApplyRespCode.Descriptor instead.
func (HandleApplyResp_HandleApplyRespCode) EnumDescriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{14, 0}
}

type QuitGroupResp_HandleApplyRespCode int32

const (
	QuitGroupResp_OK        QuitGroupResp_HandleApplyRespCode = 0
	QuitGroupResp_NO_MEMBER QuitGroupResp_HandleApplyRespCode = 1
)

// Enum value maps for QuitGroupResp_HandleApplyRespCode.
var (
	QuitGroupResp_HandleApplyRespCode_name = map[int32]string{
		0: "OK",
		1: "NO_MEMBER",
	}
	QuitGroupResp_HandleApplyRespCode_value = map[string]int32{
		"OK":        0,
		"NO_MEMBER": 1,
	}
)

func (x QuitGroupResp_HandleApplyRespCode) Enum() *QuitGroupResp_HandleApplyRespCode {
	p := new(QuitGroupResp_HandleApplyRespCode)
	*p = x
	return p
}

func (x QuitGroupResp_HandleApplyRespCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuitGroupResp_HandleApplyRespCode) Descriptor() protoreflect.EnumDescriptor {
	return file_service_im_relation_proto_enumTypes[3].Descriptor()
}

func (QuitGroupResp_HandleApplyRespCode) Type() protoreflect.EnumType {
	return &file_service_im_relation_proto_enumTypes[3]
}

func (x QuitGroupResp_HandleApplyRespCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuitGroupResp_HandleApplyRespCode.Descriptor instead.
func (QuitGroupResp_HandleApplyRespCode) EnumDescriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{16, 0}
}

type CreateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session  *base.SessionEntry `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	EchoCode string             `protobuf:"bytes,2,opt,name=echo_code,json=echoCode,proto3" json:"echo_code,omitempty"`
}

func (x *CreateGroupReq) Reset() {
	*x = CreateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupReq) ProtoMessage() {}

func (x *CreateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupReq.ProtoReflect.Descriptor instead.
func (*CreateGroupReq) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{0}
}

func (x *CreateGroupReq) GetSession() *base.SessionEntry {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CreateGroupReq) GetEchoCode() string {
	if x != nil {
		return x.EchoCode
	}
	return ""
}

type CreateGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CreateAt int64  `protobuf:"varint,2,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
}

func (x *CreateGroupResp) Reset() {
	*x = CreateGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupResp) ProtoMessage() {}

func (x *CreateGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupResp.ProtoReflect.Descriptor instead.
func (*CreateGroupResp) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{1}
}

func (x *CreateGroupResp) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CreateGroupResp) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

type RelationEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId    string `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	RelationId int64  `protobuf:"varint,3,opt,name=relation_id,json=relationId,proto3" json:"relation_id,omitempty"`
	InGroup    bool   `protobuf:"varint,4,opt,name=in_group,json=inGroup,proto3" json:"in_group,omitempty"`
	UpdatedAt  int64  `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *RelationEntry) Reset() {
	*x = RelationEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationEntry) ProtoMessage() {}

func (x *RelationEntry) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationEntry.ProtoReflect.Descriptor instead.
func (*RelationEntry) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{2}
}

func (x *RelationEntry) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RelationEntry) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *RelationEntry) GetRelationId() int64 {
	if x != nil {
		return x.RelationId
	}
	return 0
}

func (x *RelationEntry) GetInGroup() bool {
	if x != nil {
		return x.InGroup
	}
	return false
}

func (x *RelationEntry) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    string           `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	OwnerId    string           `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	CreateAt   int64            `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	Disbanded  bool             `protobuf:"varint,5,opt,name=disbanded,proto3" json:"disbanded,omitempty"`
	DisbanedAt int64            `protobuf:"varint,6,opt,name=disbaned_at,json=disbanedAt,proto3" json:"disbaned_at,omitempty"`
	Relations  []*RelationEntry `protobuf:"bytes,7,rep,name=relations,proto3" json:"relations,omitempty"`
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{3}
}

func (x *GroupInfo) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupInfo) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *GroupInfo) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *GroupInfo) GetDisbanded() bool {
	if x != nil {
		return x.Disbanded
	}
	return false
}

func (x *GroupInfo) GetDisbanedAt() int64 {
	if x != nil {
		return x.DisbanedAt
	}
	return 0
}

func (x *GroupInfo) GetRelations() []*RelationEntry {
	if x != nil {
		return x.Relations
	}
	return nil
}

type GetGroupInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session  *base.SessionEntry `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	EchoCode string             `protobuf:"bytes,2,opt,name=echo_code,json=echoCode,proto3" json:"echo_code,omitempty"`
	GroupId  string             `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Info     *GroupInfo         `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetGroupInfoReq) Reset() {
	*x = GetGroupInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoReq) ProtoMessage() {}

func (x *GetGroupInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoReq.ProtoReflect.Descriptor instead.
func (*GetGroupInfoReq) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{4}
}

func (x *GetGroupInfoReq) GetSession() *base.SessionEntry {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *GetGroupInfoReq) GetEchoCode() string {
	if x != nil {
		return x.EchoCode
	}
	return ""
}

func (x *GetGroupInfoReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GetGroupInfoReq) GetInfo() *GroupInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGroupInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool       `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	Info   *GroupInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetGroupInfoResp) Reset() {
	*x = GetGroupInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoResp) ProtoMessage() {}

func (x *GetGroupInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoResp.ProtoReflect.Descriptor instead.
func (*GetGroupInfoResp) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{5}
}

func (x *GetGroupInfoResp) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *GetGroupInfoResp) GetInfo() *GroupInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// 拉全量关系
type FetchAllRelationsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session  *base.SessionEntry `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	EchoCode string             `protobuf:"bytes,2,opt,name=echo_code,json=echoCode,proto3" json:"echo_code,omitempty"`
}

func (x *FetchAllRelationsReq) Reset() {
	*x = FetchAllRelationsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchAllRelationsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAllRelationsReq) ProtoMessage() {}

func (x *FetchAllRelationsReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAllRelationsReq.ProtoReflect.Descriptor instead.
func (*FetchAllRelationsReq) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{6}
}

func (x *FetchAllRelationsReq) GetSession() *base.SessionEntry {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *FetchAllRelationsReq) GetEchoCode() string {
	if x != nil {
		return x.EchoCode
	}
	return ""
}

type FetchAllRelationsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relations []*RelationEntry `protobuf:"bytes,1,rep,name=relations,proto3" json:"relations,omitempty"`
}

func (x *FetchAllRelationsResp) Reset() {
	*x = FetchAllRelationsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchAllRelationsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAllRelationsResp) ProtoMessage() {}

func (x *FetchAllRelationsResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAllRelationsResp.ProtoReflect.Descriptor instead.
func (*FetchAllRelationsResp) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{7}
}

func (x *FetchAllRelationsResp) GetRelations() []*RelationEntry {
	if x != nil {
		return x.Relations
	}
	return nil
}

// 申请加入群
type ApplyGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session  *base.SessionEntry `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	EchoCode string             `protobuf:"bytes,2,opt,name=echo_code,json=echoCode,proto3" json:"echo_code,omitempty"`
	GroupId  string             `protobuf:"bytes,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// 申请理由
	ApplyMsg string `protobuf:"bytes,5,opt,name=apply_msg,json=applyMsg,proto3" json:"apply_msg,omitempty"`
}

func (x *ApplyGroupReq) Reset() {
	*x = ApplyGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyGroupReq) ProtoMessage() {}

func (x *ApplyGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyGroupReq.ProtoReflect.Descriptor instead.
func (*ApplyGroupReq) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{8}
}

func (x *ApplyGroupReq) GetSession() *base.SessionEntry {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ApplyGroupReq) GetEchoCode() string {
	if x != nil {
		return x.EchoCode
	}
	return ""
}

func (x *ApplyGroupReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ApplyGroupReq) GetApplyMsg() string {
	if x != nil {
		return x.ApplyMsg
	}
	return ""
}

type ApplyGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ApplyGroupResp_ApplyGroupRespCode `protobuf:"varint,1,opt,name=code,proto3,enum=imrelation.ApplyGroupResp_ApplyGroupRespCode" json:"code,omitempty"`
	// 对于同一个群, 多次申请, apply_version是递增的
	ApplyVersion int64 `protobuf:"varint,2,opt,name=apply_version,json=applyVersion,proto3" json:"apply_version,omitempty"`
	ApplyAt      int64 `protobuf:"varint,4,opt,name=apply_at,json=applyAt,proto3" json:"apply_at,omitempty"`
}

func (x *ApplyGroupResp) Reset() {
	*x = ApplyGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyGroupResp) ProtoMessage() {}

func (x *ApplyGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyGroupResp.ProtoReflect.Descriptor instead.
func (*ApplyGroupResp) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{9}
}

func (x *ApplyGroupResp) GetCode() ApplyGroupResp_ApplyGroupRespCode {
	if x != nil {
		return x.Code
	}
	return ApplyGroupResp_OK
}

func (x *ApplyGroupResp) GetApplyVersion() int64 {
	if x != nil {
		return x.ApplyVersion
	}
	return 0
}

func (x *ApplyGroupResp) GetApplyAt() int64 {
	if x != nil {
		return x.ApplyAt
	}
	return 0
}

type ApplyEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId      string                 `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	ApplyVersion int64                  `protobuf:"varint,3,opt,name=apply_version,json=applyVersion,proto3" json:"apply_version,omitempty"`
	ApplyAt      int64                  `protobuf:"varint,4,opt,name=apply_at,json=applyAt,proto3" json:"apply_at,omitempty"`
	ApplyMsg     string                 `protobuf:"bytes,5,opt,name=apply_msg,json=applyMsg,proto3" json:"apply_msg,omitempty"`
	Status       ApplyEntry_ApplyStatus `protobuf:"varint,6,opt,name=status,proto3,enum=imrelation.ApplyEntry_ApplyStatus" json:"status,omitempty"`
}

func (x *ApplyEntry) Reset() {
	*x = ApplyEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyEntry) ProtoMessage() {}

func (x *ApplyEntry) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyEntry.ProtoReflect.Descriptor instead.
func (*ApplyEntry) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{10}
}

func (x *ApplyEntry) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ApplyEntry) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ApplyEntry) GetApplyVersion() int64 {
	if x != nil {
		return x.ApplyVersion
	}
	return 0
}

func (x *ApplyEntry) GetApplyAt() int64 {
	if x != nil {
		return x.ApplyAt
	}
	return 0
}

func (x *ApplyEntry) GetApplyMsg() string {
	if x != nil {
		return x.ApplyMsg
	}
	return ""
}

func (x *ApplyEntry) GetStatus() ApplyEntry_ApplyStatus {
	if x != nil {
		return x.Status
	}
	return ApplyEntry_PENDING
}

type FetchAllApplicationsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session  *base.SessionEntry `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	EchoCode string             `protobuf:"bytes,2,opt,name=echo_code,json=echoCode,proto3" json:"echo_code,omitempty"`
}

func (x *FetchAllApplicationsReq) Reset() {
	*x = FetchAllApplicationsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchAllApplicationsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAllApplicationsReq) ProtoMessage() {}

func (x *FetchAllApplicationsReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAllApplicationsReq.ProtoReflect.Descriptor instead.
func (*FetchAllApplicationsReq) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{11}
}

func (x *FetchAllApplicationsReq) GetSession() *base.SessionEntry {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *FetchAllApplicationsReq) GetEchoCode() string {
	if x != nil {
		return x.EchoCode
	}
	return ""
}

type FetchAllApplicationsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Applications []*ApplyEntry `protobuf:"bytes,1,rep,name=applications,proto3" json:"applications,omitempty"`
}

func (x *FetchAllApplicationsResp) Reset() {
	*x = FetchAllApplicationsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchAllApplicationsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAllApplicationsResp) ProtoMessage() {}

func (x *FetchAllApplicationsResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAllApplicationsResp.ProtoReflect.Descriptor instead.
func (*FetchAllApplicationsResp) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{12}
}

func (x *FetchAllApplicationsResp) GetApplications() []*ApplyEntry {
	if x != nil {
		return x.Applications
	}
	return nil
}

type HandleApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *base.SessionEntry `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	UserId  string             `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId string             `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Accept  bool               `protobuf:"varint,4,opt,name=accept,proto3" json:"accept,omitempty"`
}

func (x *HandleApplyReq) Reset() {
	*x = HandleApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleApplyReq) ProtoMessage() {}

func (x *HandleApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleApplyReq.ProtoReflect.Descriptor instead.
func (*HandleApplyReq) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{13}
}

func (x *HandleApplyReq) GetSession() *base.SessionEntry {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *HandleApplyReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HandleApplyReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *HandleApplyReq) GetAccept() bool {
	if x != nil {
		return x.Accept
	}
	return false
}

type HandleApplyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code HandleApplyResp_HandleApplyRespCode `protobuf:"varint,1,opt,name=code,proto3,enum=imrelation.HandleApplyResp_HandleApplyRespCode" json:"code,omitempty"`
	// 一个人关于一个群的关系, 是递增的, 每次被踢/加入都会+1
	RelationVersion int64 `protobuf:"varint,2,opt,name=relation_version,json=relationVersion,proto3" json:"relation_version,omitempty"`
	// 最新的申请id和申请信息
	ApplyId  int64  `protobuf:"varint,3,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	ApplyMsg string `protobuf:"bytes,4,opt,name=apply_msg,json=applyMsg,proto3" json:"apply_msg,omitempty"`
	ApplyAt  int64  `protobuf:"varint,5,opt,name=apply_at,json=applyAt,proto3" json:"apply_at,omitempty"`
}

func (x *HandleApplyResp) Reset() {
	*x = HandleApplyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleApplyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleApplyResp) ProtoMessage() {}

func (x *HandleApplyResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleApplyResp.ProtoReflect.Descriptor instead.
func (*HandleApplyResp) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{14}
}

func (x *HandleApplyResp) GetCode() HandleApplyResp_HandleApplyRespCode {
	if x != nil {
		return x.Code
	}
	return HandleApplyResp_OK
}

func (x *HandleApplyResp) GetRelationVersion() int64 {
	if x != nil {
		return x.RelationVersion
	}
	return 0
}

func (x *HandleApplyResp) GetApplyId() int64 {
	if x != nil {
		return x.ApplyId
	}
	return 0
}

func (x *HandleApplyResp) GetApplyMsg() string {
	if x != nil {
		return x.ApplyMsg
	}
	return ""
}

func (x *HandleApplyResp) GetApplyAt() int64 {
	if x != nil {
		return x.ApplyAt
	}
	return 0
}

type QuitGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session  *base.SessionEntry `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	EchoCode string             `protobuf:"bytes,2,opt,name=echo_code,json=echoCode,proto3" json:"echo_code,omitempty"`
	GroupId  string             `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *QuitGroupReq) Reset() {
	*x = QuitGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitGroupReq) ProtoMessage() {}

func (x *QuitGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitGroupReq.ProtoReflect.Descriptor instead.
func (*QuitGroupReq) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{15}
}

func (x *QuitGroupReq) GetSession() *base.SessionEntry {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *QuitGroupReq) GetEchoCode() string {
	if x != nil {
		return x.EchoCode
	}
	return ""
}

func (x *QuitGroupReq) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type QuitGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            QuitGroupResp_HandleApplyRespCode `protobuf:"varint,1,opt,name=code,proto3,enum=imrelation.QuitGroupResp_HandleApplyRespCode" json:"code,omitempty"`
	RelationVersion int64                             `protobuf:"varint,2,opt,name=relation_version,json=relationVersion,proto3" json:"relation_version,omitempty"`
}

func (x *QuitGroupResp) Reset() {
	*x = QuitGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_im_relation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuitGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuitGroupResp) ProtoMessage() {}

func (x *QuitGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_im_relation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuitGroupResp.ProtoReflect.Descriptor instead.
func (*QuitGroupResp) Descriptor() ([]byte, []int) {
	return file_service_im_relation_proto_rawDescGZIP(), []int{16}
}

func (x *QuitGroupResp) GetCode() QuitGroupResp_HandleApplyRespCode {
	if x != nil {
		return x.Code
	}
	return QuitGroupResp_OK
}

func (x *QuitGroupResp) GetRelationVersion() int64 {
	if x != nil {
		return x.RelationVersion
	}
	return 0
}

var File_service_im_relation_proto protoreflect.FileDescriptor

var file_service_im_relation_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6d, 0x2d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x69, 0x6d, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x63, 0x68, 0x6f,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x63, 0x68,
	0x6f, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x49, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x22, 0x9e, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xd6, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x2c,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x63, 0x68, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x63, 0x68, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x55, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2c,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x63, 0x68, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x63, 0x68, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x50, 0x0a, 0x15, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0d,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x63, 0x68, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x63, 0x68, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x73, 0x67,
	0x22, 0xe7, 0x01, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x22, 0x52, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x49,
	0x53, 0x42, 0x41, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x4f, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x22, 0xa6, 0x02, 0x0a, 0x0a, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x6d, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4b, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x49, 0x53, 0x42, 0x41, 0x4e, 0x44, 0x45,
	0x44, 0x10, 0x03, 0x22, 0x64, 0x0a, 0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2c,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x63, 0x68, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x63, 0x68, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x56, 0x0a, 0x18, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x41, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x22, 0xb7,
	0x02, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x41, 0x74, 0x22, 0x61, 0x0a, 0x13, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x49, 0x53,
	0x42, 0x41, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x22, 0x74, 0x0a, 0x0c, 0x51, 0x75, 0x69, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x63, 0x68, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xab,
	0x01, 0x0a, 0x0d, 0x51, 0x75, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x41, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x69, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2c,
	0x0a, 0x13, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x32, 0xab, 0x04, 0x0a,
	0x0a, 0x49, 0x4d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x2e, 0x69, 0x6d, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58,
	0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x41, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x23, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0a, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x2e, 0x69, 0x6d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x46, 0x0a, 0x0b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12,
	0x1a, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x69, 0x6d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x09, 0x51, 0x75, 0x69, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x69,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x42, 0x25, 0x5a, 0x23, 0x70, 0x69,
	0x67, 0x65, 0x6f, 0x6e, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_im_relation_proto_rawDescOnce sync.Once
	file_service_im_relation_proto_rawDescData = file_service_im_relation_proto_rawDesc
)

func file_service_im_relation_proto_rawDescGZIP() []byte {
	file_service_im_relation_proto_rawDescOnce.Do(func() {
		file_service_im_relation_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_im_relation_proto_rawDescData)
	})
	return file_service_im_relation_proto_rawDescData
}

var file_service_im_relation_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_service_im_relation_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_service_im_relation_proto_goTypes = []interface{}{
	(ApplyGroupResp_ApplyGroupRespCode)(0),   // 0: imrelation.ApplyGroupResp.ApplyGroupRespCode
	(ApplyEntry_ApplyStatus)(0),              // 1: imrelation.ApplyEntry.ApplyStatus
	(HandleApplyResp_HandleApplyRespCode)(0), // 2: imrelation.HandleApplyResp.HandleApplyRespCode
	(QuitGroupResp_HandleApplyRespCode)(0),   // 3: imrelation.QuitGroupResp.HandleApplyRespCode
	(*CreateGroupReq)(nil),                   // 4: imrelation.CreateGroupReq
	(*CreateGroupResp)(nil),                  // 5: imrelation.CreateGroupResp
	(*RelationEntry)(nil),                    // 6: imrelation.RelationEntry
	(*GroupInfo)(nil),                        // 7: imrelation.GroupInfo
	(*GetGroupInfoReq)(nil),                  // 8: imrelation.GetGroupInfoReq
	(*GetGroupInfoResp)(nil),                 // 9: imrelation.GetGroupInfoResp
	(*FetchAllRelationsReq)(nil),             // 10: imrelation.FetchAllRelationsReq
	(*FetchAllRelationsResp)(nil),            // 11: imrelation.FetchAllRelationsResp
	(*ApplyGroupReq)(nil),                    // 12: imrelation.ApplyGroupReq
	(*ApplyGroupResp)(nil),                   // 13: imrelation.ApplyGroupResp
	(*ApplyEntry)(nil),                       // 14: imrelation.ApplyEntry
	(*FetchAllApplicationsReq)(nil),          // 15: imrelation.FetchAllApplicationsReq
	(*FetchAllApplicationsResp)(nil),         // 16: imrelation.FetchAllApplicationsResp
	(*HandleApplyReq)(nil),                   // 17: imrelation.HandleApplyReq
	(*HandleApplyResp)(nil),                  // 18: imrelation.HandleApplyResp
	(*QuitGroupReq)(nil),                     // 19: imrelation.QuitGroupReq
	(*QuitGroupResp)(nil),                    // 20: imrelation.QuitGroupResp
	(*base.SessionEntry)(nil),                // 21: base.SessionEntry
}
var file_service_im_relation_proto_depIdxs = []int32{
	21, // 0: imrelation.CreateGroupReq.session:type_name -> base.SessionEntry
	6,  // 1: imrelation.GroupInfo.relations:type_name -> imrelation.RelationEntry
	21, // 2: imrelation.GetGroupInfoReq.session:type_name -> base.SessionEntry
	7,  // 3: imrelation.GetGroupInfoReq.info:type_name -> imrelation.GroupInfo
	7,  // 4: imrelation.GetGroupInfoResp.info:type_name -> imrelation.GroupInfo
	21, // 5: imrelation.FetchAllRelationsReq.session:type_name -> base.SessionEntry
	6,  // 6: imrelation.FetchAllRelationsResp.relations:type_name -> imrelation.RelationEntry
	21, // 7: imrelation.ApplyGroupReq.session:type_name -> base.SessionEntry
	0,  // 8: imrelation.ApplyGroupResp.code:type_name -> imrelation.ApplyGroupResp.ApplyGroupRespCode
	1,  // 9: imrelation.ApplyEntry.status:type_name -> imrelation.ApplyEntry.ApplyStatus
	21, // 10: imrelation.FetchAllApplicationsReq.session:type_name -> base.SessionEntry
	14, // 11: imrelation.FetchAllApplicationsResp.applications:type_name -> imrelation.ApplyEntry
	21, // 12: imrelation.HandleApplyReq.session:type_name -> base.SessionEntry
	2,  // 13: imrelation.HandleApplyResp.code:type_name -> imrelation.HandleApplyResp.HandleApplyRespCode
	21, // 14: imrelation.QuitGroupReq.session:type_name -> base.SessionEntry
	3,  // 15: imrelation.QuitGroupResp.code:type_name -> imrelation.QuitGroupResp.HandleApplyRespCode
	4,  // 16: imrelation.IMRelation.CreateGroup:input_type -> imrelation.CreateGroupReq
	8,  // 17: imrelation.IMRelation.GetGroupInfo:input_type -> imrelation.GetGroupInfoReq
	10, // 18: imrelation.IMRelation.FetchAllRelations:input_type -> imrelation.FetchAllRelationsReq
	15, // 19: imrelation.IMRelation.FetchAllApplications:input_type -> imrelation.FetchAllApplicationsReq
	12, // 20: imrelation.IMRelation.ApplyGroup:input_type -> imrelation.ApplyGroupReq
	17, // 21: imrelation.IMRelation.HandleApply:input_type -> imrelation.HandleApplyReq
	19, // 22: imrelation.IMRelation.QuitGroup:input_type -> imrelation.QuitGroupReq
	5,  // 23: imrelation.IMRelation.CreateGroup:output_type -> imrelation.CreateGroupResp
	9,  // 24: imrelation.IMRelation.GetGroupInfo:output_type -> imrelation.GetGroupInfoResp
	11, // 25: imrelation.IMRelation.FetchAllRelations:output_type -> imrelation.FetchAllRelationsResp
	16, // 26: imrelation.IMRelation.FetchAllApplications:output_type -> imrelation.FetchAllApplicationsResp
	13, // 27: imrelation.IMRelation.ApplyGroup:output_type -> imrelation.ApplyGroupResp
	18, // 28: imrelation.IMRelation.HandleApply:output_type -> imrelation.HandleApplyResp
	20, // 29: imrelation.IMRelation.QuitGroup:output_type -> imrelation.QuitGroupResp
	23, // [23:30] is the sub-list for method output_type
	16, // [16:23] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_service_im_relation_proto_init() }
func file_service_im_relation_proto_init() {
	if File_service_im_relation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_im_relation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchAllRelationsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchAllRelationsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchAllApplicationsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchAllApplicationsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleApplyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_im_relation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuitGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_im_relation_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_im_relation_proto_goTypes,
		DependencyIndexes: file_service_im_relation_proto_depIdxs,
		EnumInfos:         file_service_im_relation_proto_enumTypes,
		MessageInfos:      file_service_im_relation_proto_msgTypes,
	}.Build()
	File_service_im_relation_proto = out.File
	file_service_im_relation_proto_rawDesc = nil
	file_service_im_relation_proto_goTypes = nil
	file_service_im_relation_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.11.3. DO NOT EDIT.

type IMRelation interface {
	CreateGroup(ctx context.Context, req *CreateGroupReq) (res *CreateGroupResp, err error)
	GetGroupInfo(ctx context.Context, req *GetGroupInfoReq) (res *GetGroupInfoResp, err error)
	FetchAllRelations(ctx context.Context, req *FetchAllRelationsReq) (res *FetchAllRelationsResp, err error)
	FetchAllApplications(ctx context.Context, req *FetchAllApplicationsReq) (res *FetchAllApplicationsResp, err error)
	ApplyGroup(ctx context.Context, req *ApplyGroupReq) (res *ApplyGroupResp, err error)
	HandleApply(ctx context.Context, req *HandleApplyReq) (res *HandleApplyResp, err error)
	QuitGroup(ctx context.Context, req *QuitGroupReq) (res *QuitGroupResp, err error)
}
