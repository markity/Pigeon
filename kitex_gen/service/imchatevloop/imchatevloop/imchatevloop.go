// Code generated by Kitex v0.11.3. DO NOT EDIT.

package imchatevloop

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	imchatevloop "pigeon/kitex_gen/service/imchatevloop"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateGroup": kitex.NewMethodInfo(
		createGroupHandler,
		newCreateGroupArgs,
		newCreateGroupResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UniversalGroupEvloopRequest": kitex.NewMethodInfo(
		universalGroupEvloopRequestHandler,
		newUniversalGroupEvloopRequestArgs,
		newUniversalGroupEvloopRequestResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	iMChatEvloopServiceInfo                = NewServiceInfo()
	iMChatEvloopServiceInfoForClient       = NewServiceInfoForClient()
	iMChatEvloopServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return iMChatEvloopServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return iMChatEvloopServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return iMChatEvloopServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "IMChatEvloop"
	handlerType := (*imchatevloop.IMChatEvloop)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "imchatevloop",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func createGroupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(imchatevloop.CreateGroupRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(imchatevloop.IMChatEvloop).CreateGroup(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateGroupArgs:
		success, err := handler.(imchatevloop.IMChatEvloop).CreateGroup(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateGroupResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateGroupArgs() interface{} {
	return &CreateGroupArgs{}
}

func newCreateGroupResult() interface{} {
	return &CreateGroupResult{}
}

type CreateGroupArgs struct {
	Req *imchatevloop.CreateGroupRequest
}

func (p *CreateGroupArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(imchatevloop.CreateGroupRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateGroupArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateGroupArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateGroupArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateGroupArgs) Unmarshal(in []byte) error {
	msg := new(imchatevloop.CreateGroupRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateGroupArgs_Req_DEFAULT *imchatevloop.CreateGroupRequest

func (p *CreateGroupArgs) GetReq() *imchatevloop.CreateGroupRequest {
	if !p.IsSetReq() {
		return CreateGroupArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateGroupArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateGroupArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateGroupResult struct {
	Success *imchatevloop.CreateGroupResponse
}

var CreateGroupResult_Success_DEFAULT *imchatevloop.CreateGroupResponse

func (p *CreateGroupResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(imchatevloop.CreateGroupResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateGroupResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateGroupResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateGroupResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateGroupResult) Unmarshal(in []byte) error {
	msg := new(imchatevloop.CreateGroupResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateGroupResult) GetSuccess() *imchatevloop.CreateGroupResponse {
	if !p.IsSetSuccess() {
		return CreateGroupResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateGroupResult) SetSuccess(x interface{}) {
	p.Success = x.(*imchatevloop.CreateGroupResponse)
}

func (p *CreateGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateGroupResult) GetResult() interface{} {
	return p.Success
}

func universalGroupEvloopRequestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(imchatevloop.UniversalGroupEvloopRequestReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(imchatevloop.IMChatEvloop).UniversalGroupEvloopRequest(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UniversalGroupEvloopRequestArgs:
		success, err := handler.(imchatevloop.IMChatEvloop).UniversalGroupEvloopRequest(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UniversalGroupEvloopRequestResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUniversalGroupEvloopRequestArgs() interface{} {
	return &UniversalGroupEvloopRequestArgs{}
}

func newUniversalGroupEvloopRequestResult() interface{} {
	return &UniversalGroupEvloopRequestResult{}
}

type UniversalGroupEvloopRequestArgs struct {
	Req *imchatevloop.UniversalGroupEvloopRequestReq
}

func (p *UniversalGroupEvloopRequestArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(imchatevloop.UniversalGroupEvloopRequestReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UniversalGroupEvloopRequestArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UniversalGroupEvloopRequestArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UniversalGroupEvloopRequestArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UniversalGroupEvloopRequestArgs) Unmarshal(in []byte) error {
	msg := new(imchatevloop.UniversalGroupEvloopRequestReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UniversalGroupEvloopRequestArgs_Req_DEFAULT *imchatevloop.UniversalGroupEvloopRequestReq

func (p *UniversalGroupEvloopRequestArgs) GetReq() *imchatevloop.UniversalGroupEvloopRequestReq {
	if !p.IsSetReq() {
		return UniversalGroupEvloopRequestArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UniversalGroupEvloopRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UniversalGroupEvloopRequestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UniversalGroupEvloopRequestResult struct {
	Success *imchatevloop.UniversalGroupEvloopRequestResp
}

var UniversalGroupEvloopRequestResult_Success_DEFAULT *imchatevloop.UniversalGroupEvloopRequestResp

func (p *UniversalGroupEvloopRequestResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(imchatevloop.UniversalGroupEvloopRequestResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UniversalGroupEvloopRequestResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UniversalGroupEvloopRequestResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UniversalGroupEvloopRequestResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UniversalGroupEvloopRequestResult) Unmarshal(in []byte) error {
	msg := new(imchatevloop.UniversalGroupEvloopRequestResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UniversalGroupEvloopRequestResult) GetSuccess() *imchatevloop.UniversalGroupEvloopRequestResp {
	if !p.IsSetSuccess() {
		return UniversalGroupEvloopRequestResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UniversalGroupEvloopRequestResult) SetSuccess(x interface{}) {
	p.Success = x.(*imchatevloop.UniversalGroupEvloopRequestResp)
}

func (p *UniversalGroupEvloopRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UniversalGroupEvloopRequestResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateGroup(ctx context.Context, Req *imchatevloop.CreateGroupRequest) (r *imchatevloop.CreateGroupResponse, err error) {
	var _args CreateGroupArgs
	_args.Req = Req
	var _result CreateGroupResult
	if err = p.c.Call(ctx, "CreateGroup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UniversalGroupEvloopRequest(ctx context.Context, Req *imchatevloop.UniversalGroupEvloopRequestReq) (r *imchatevloop.UniversalGroupEvloopRequestResp, err error) {
	var _args UniversalGroupEvloopRequestArgs
	_args.Req = Req
	var _result UniversalGroupEvloopRequestResult
	if err = p.c.Call(ctx, "UniversalGroupEvloopRequest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
