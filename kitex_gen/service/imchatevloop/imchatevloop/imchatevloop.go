// Code generated by Kitex v0.11.3. DO NOT EDIT.

package imchatevloop

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	imchatevloop "pigeon/kitex_gen/service/imchatevloop"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateGroup": kitex.NewMethodInfo(
		createGroupHandler,
		newCreateGroupArgs,
		newCreateGroupResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"AlterGroupMember": kitex.NewMethodInfo(
		alterGroupMemberHandler,
		newAlterGroupMemberArgs,
		newAlterGroupMemberResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SubscribeGroup": kitex.NewMethodInfo(
		subscribeGroupHandler,
		newSubscribeGroupArgs,
		newSubscribeGroupResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SendMessage": kitex.NewMethodInfo(
		sendMessageHandler,
		newSendMessageArgs,
		newSendMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DisbandGroup": kitex.NewMethodInfo(
		disbandGroupHandler,
		newDisbandGroupArgs,
		newDisbandGroupResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	iMChatEvloopServiceInfo                = NewServiceInfo()
	iMChatEvloopServiceInfoForClient       = NewServiceInfoForClient()
	iMChatEvloopServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return iMChatEvloopServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return iMChatEvloopServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return iMChatEvloopServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "IMChatEvloop"
	handlerType := (*imchatevloop.IMChatEvloop)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "imchatevloop",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func createGroupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(imchatevloop.CreateGroupRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(imchatevloop.IMChatEvloop).CreateGroup(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateGroupArgs:
		success, err := handler.(imchatevloop.IMChatEvloop).CreateGroup(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateGroupResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateGroupArgs() interface{} {
	return &CreateGroupArgs{}
}

func newCreateGroupResult() interface{} {
	return &CreateGroupResult{}
}

type CreateGroupArgs struct {
	Req *imchatevloop.CreateGroupRequest
}

func (p *CreateGroupArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(imchatevloop.CreateGroupRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateGroupArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateGroupArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateGroupArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateGroupArgs) Unmarshal(in []byte) error {
	msg := new(imchatevloop.CreateGroupRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateGroupArgs_Req_DEFAULT *imchatevloop.CreateGroupRequest

func (p *CreateGroupArgs) GetReq() *imchatevloop.CreateGroupRequest {
	if !p.IsSetReq() {
		return CreateGroupArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateGroupArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateGroupArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateGroupResult struct {
	Success *imchatevloop.CreateGroupResponse
}

var CreateGroupResult_Success_DEFAULT *imchatevloop.CreateGroupResponse

func (p *CreateGroupResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(imchatevloop.CreateGroupResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateGroupResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateGroupResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateGroupResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateGroupResult) Unmarshal(in []byte) error {
	msg := new(imchatevloop.CreateGroupResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateGroupResult) GetSuccess() *imchatevloop.CreateGroupResponse {
	if !p.IsSetSuccess() {
		return CreateGroupResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateGroupResult) SetSuccess(x interface{}) {
	p.Success = x.(*imchatevloop.CreateGroupResponse)
}

func (p *CreateGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateGroupResult) GetResult() interface{} {
	return p.Success
}

func alterGroupMemberHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(imchatevloop.AlterGroupMemberRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(imchatevloop.IMChatEvloop).AlterGroupMember(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AlterGroupMemberArgs:
		success, err := handler.(imchatevloop.IMChatEvloop).AlterGroupMember(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AlterGroupMemberResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAlterGroupMemberArgs() interface{} {
	return &AlterGroupMemberArgs{}
}

func newAlterGroupMemberResult() interface{} {
	return &AlterGroupMemberResult{}
}

type AlterGroupMemberArgs struct {
	Req *imchatevloop.AlterGroupMemberRequest
}

func (p *AlterGroupMemberArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(imchatevloop.AlterGroupMemberRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AlterGroupMemberArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AlterGroupMemberArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AlterGroupMemberArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AlterGroupMemberArgs) Unmarshal(in []byte) error {
	msg := new(imchatevloop.AlterGroupMemberRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AlterGroupMemberArgs_Req_DEFAULT *imchatevloop.AlterGroupMemberRequest

func (p *AlterGroupMemberArgs) GetReq() *imchatevloop.AlterGroupMemberRequest {
	if !p.IsSetReq() {
		return AlterGroupMemberArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AlterGroupMemberArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AlterGroupMemberArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AlterGroupMemberResult struct {
	Success *imchatevloop.AlterGroupMemberResponse
}

var AlterGroupMemberResult_Success_DEFAULT *imchatevloop.AlterGroupMemberResponse

func (p *AlterGroupMemberResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(imchatevloop.AlterGroupMemberResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AlterGroupMemberResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AlterGroupMemberResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AlterGroupMemberResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AlterGroupMemberResult) Unmarshal(in []byte) error {
	msg := new(imchatevloop.AlterGroupMemberResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AlterGroupMemberResult) GetSuccess() *imchatevloop.AlterGroupMemberResponse {
	if !p.IsSetSuccess() {
		return AlterGroupMemberResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AlterGroupMemberResult) SetSuccess(x interface{}) {
	p.Success = x.(*imchatevloop.AlterGroupMemberResponse)
}

func (p *AlterGroupMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AlterGroupMemberResult) GetResult() interface{} {
	return p.Success
}

func subscribeGroupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(imchatevloop.SubscribeGroupRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(imchatevloop.IMChatEvloop).SubscribeGroup(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SubscribeGroupArgs:
		success, err := handler.(imchatevloop.IMChatEvloop).SubscribeGroup(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SubscribeGroupResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSubscribeGroupArgs() interface{} {
	return &SubscribeGroupArgs{}
}

func newSubscribeGroupResult() interface{} {
	return &SubscribeGroupResult{}
}

type SubscribeGroupArgs struct {
	Req *imchatevloop.SubscribeGroupRequest
}

func (p *SubscribeGroupArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(imchatevloop.SubscribeGroupRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SubscribeGroupArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SubscribeGroupArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SubscribeGroupArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SubscribeGroupArgs) Unmarshal(in []byte) error {
	msg := new(imchatevloop.SubscribeGroupRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SubscribeGroupArgs_Req_DEFAULT *imchatevloop.SubscribeGroupRequest

func (p *SubscribeGroupArgs) GetReq() *imchatevloop.SubscribeGroupRequest {
	if !p.IsSetReq() {
		return SubscribeGroupArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SubscribeGroupArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SubscribeGroupArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SubscribeGroupResult struct {
	Success *imchatevloop.SubscribeGroupResponse
}

var SubscribeGroupResult_Success_DEFAULT *imchatevloop.SubscribeGroupResponse

func (p *SubscribeGroupResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(imchatevloop.SubscribeGroupResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SubscribeGroupResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SubscribeGroupResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SubscribeGroupResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SubscribeGroupResult) Unmarshal(in []byte) error {
	msg := new(imchatevloop.SubscribeGroupResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SubscribeGroupResult) GetSuccess() *imchatevloop.SubscribeGroupResponse {
	if !p.IsSetSuccess() {
		return SubscribeGroupResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SubscribeGroupResult) SetSuccess(x interface{}) {
	p.Success = x.(*imchatevloop.SubscribeGroupResponse)
}

func (p *SubscribeGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SubscribeGroupResult) GetResult() interface{} {
	return p.Success
}

func sendMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(imchatevloop.SendMessageRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(imchatevloop.IMChatEvloop).SendMessage(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SendMessageArgs:
		success, err := handler.(imchatevloop.IMChatEvloop).SendMessage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendMessageResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSendMessageArgs() interface{} {
	return &SendMessageArgs{}
}

func newSendMessageResult() interface{} {
	return &SendMessageResult{}
}

type SendMessageArgs struct {
	Req *imchatevloop.SendMessageRequest
}

func (p *SendMessageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(imchatevloop.SendMessageRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendMessageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendMessageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendMessageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendMessageArgs) Unmarshal(in []byte) error {
	msg := new(imchatevloop.SendMessageRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendMessageArgs_Req_DEFAULT *imchatevloop.SendMessageRequest

func (p *SendMessageArgs) GetReq() *imchatevloop.SendMessageRequest {
	if !p.IsSetReq() {
		return SendMessageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendMessageArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendMessageResult struct {
	Success *imchatevloop.SendMessageResponse
}

var SendMessageResult_Success_DEFAULT *imchatevloop.SendMessageResponse

func (p *SendMessageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(imchatevloop.SendMessageResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendMessageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendMessageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendMessageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendMessageResult) Unmarshal(in []byte) error {
	msg := new(imchatevloop.SendMessageResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendMessageResult) GetSuccess() *imchatevloop.SendMessageResponse {
	if !p.IsSetSuccess() {
		return SendMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*imchatevloop.SendMessageResponse)
}

func (p *SendMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendMessageResult) GetResult() interface{} {
	return p.Success
}

func disbandGroupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(imchatevloop.DisbandGroupRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(imchatevloop.IMChatEvloop).DisbandGroup(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DisbandGroupArgs:
		success, err := handler.(imchatevloop.IMChatEvloop).DisbandGroup(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DisbandGroupResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDisbandGroupArgs() interface{} {
	return &DisbandGroupArgs{}
}

func newDisbandGroupResult() interface{} {
	return &DisbandGroupResult{}
}

type DisbandGroupArgs struct {
	Req *imchatevloop.DisbandGroupRequest
}

func (p *DisbandGroupArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(imchatevloop.DisbandGroupRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DisbandGroupArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DisbandGroupArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DisbandGroupArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DisbandGroupArgs) Unmarshal(in []byte) error {
	msg := new(imchatevloop.DisbandGroupRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DisbandGroupArgs_Req_DEFAULT *imchatevloop.DisbandGroupRequest

func (p *DisbandGroupArgs) GetReq() *imchatevloop.DisbandGroupRequest {
	if !p.IsSetReq() {
		return DisbandGroupArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DisbandGroupArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DisbandGroupArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DisbandGroupResult struct {
	Success *imchatevloop.DisbandGroupResponse
}

var DisbandGroupResult_Success_DEFAULT *imchatevloop.DisbandGroupResponse

func (p *DisbandGroupResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(imchatevloop.DisbandGroupResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DisbandGroupResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DisbandGroupResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DisbandGroupResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DisbandGroupResult) Unmarshal(in []byte) error {
	msg := new(imchatevloop.DisbandGroupResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DisbandGroupResult) GetSuccess() *imchatevloop.DisbandGroupResponse {
	if !p.IsSetSuccess() {
		return DisbandGroupResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DisbandGroupResult) SetSuccess(x interface{}) {
	p.Success = x.(*imchatevloop.DisbandGroupResponse)
}

func (p *DisbandGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DisbandGroupResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateGroup(ctx context.Context, Req *imchatevloop.CreateGroupRequest) (r *imchatevloop.CreateGroupResponse, err error) {
	var _args CreateGroupArgs
	_args.Req = Req
	var _result CreateGroupResult
	if err = p.c.Call(ctx, "CreateGroup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AlterGroupMember(ctx context.Context, Req *imchatevloop.AlterGroupMemberRequest) (r *imchatevloop.AlterGroupMemberResponse, err error) {
	var _args AlterGroupMemberArgs
	_args.Req = Req
	var _result AlterGroupMemberResult
	if err = p.c.Call(ctx, "AlterGroupMember", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SubscribeGroup(ctx context.Context, Req *imchatevloop.SubscribeGroupRequest) (r *imchatevloop.SubscribeGroupResponse, err error) {
	var _args SubscribeGroupArgs
	_args.Req = Req
	var _result SubscribeGroupResult
	if err = p.c.Call(ctx, "SubscribeGroup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendMessage(ctx context.Context, Req *imchatevloop.SendMessageRequest) (r *imchatevloop.SendMessageResponse, err error) {
	var _args SendMessageArgs
	_args.Req = Req
	var _result SendMessageResult
	if err = p.c.Call(ctx, "SendMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DisbandGroup(ctx context.Context, Req *imchatevloop.DisbandGroupRequest) (r *imchatevloop.DisbandGroupResponse, err error) {
	var _args DisbandGroupArgs
	_args.Req = Req
	var _result DisbandGroupResult
	if err = p.c.Call(ctx, "DisbandGroup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
