// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package imchatevloop

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	base "pigeon/kitex_gen/service/base"
	evloopio "pigeon/kitex_gen/service/evloopio"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *CreateGroupRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateGroupRequest[number], err)
}

func (x *CreateGroupRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Version, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateGroupRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.GroupId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateGroupRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.GroupOwnerId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateGroupResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateGroupResponse[number], err)
}

func (x *CreateGroupResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Success, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CreateGroupResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Version, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UniversalGroupEvloopRequestReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UniversalGroupEvloopRequestReq[number], err)
}

func (x *UniversalGroupEvloopRequestReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Version, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UniversalGroupEvloopRequestReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.GroupId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UniversalGroupEvloopRequestReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v evloopio.UniversalGroupEvloopInput
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Input = &v
	return offset, nil
}

func (x *UniversalGroupEvloopRequestResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UniversalGroupEvloopRequestResp[number], err)
}

func (x *UniversalGroupEvloopRequestResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Success, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *UniversalGroupEvloopRequestResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Version, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UniversalGroupEvloopRequestResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v evloopio.UniversalGroupEvloopOutput
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Output = &v
	return offset, nil
}

func (x *CreateGroupRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *CreateGroupRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Version == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetVersion())
	return offset
}

func (x *CreateGroupRequest) fastWriteField2(buf []byte) (offset int) {
	if x.GroupId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetGroupId())
	return offset
}

func (x *CreateGroupRequest) fastWriteField3(buf []byte) (offset int) {
	if x.GroupOwnerId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetGroupOwnerId())
	return offset
}

func (x *CreateGroupResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateGroupResponse) fastWriteField1(buf []byte) (offset int) {
	if !x.Success {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetSuccess())
	return offset
}

func (x *CreateGroupResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Version == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetVersion())
	return offset
}

func (x *UniversalGroupEvloopRequestReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UniversalGroupEvloopRequestReq) fastWriteField1(buf []byte) (offset int) {
	if x.Version == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetVersion())
	return offset
}

func (x *UniversalGroupEvloopRequestReq) fastWriteField2(buf []byte) (offset int) {
	if x.GroupId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetGroupId())
	return offset
}

func (x *UniversalGroupEvloopRequestReq) fastWriteField3(buf []byte) (offset int) {
	if x.Input == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetInput())
	return offset
}

func (x *UniversalGroupEvloopRequestResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UniversalGroupEvloopRequestResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Success {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetSuccess())
	return offset
}

func (x *UniversalGroupEvloopRequestResp) fastWriteField2(buf []byte) (offset int) {
	if x.Version == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetVersion())
	return offset
}

func (x *UniversalGroupEvloopRequestResp) fastWriteField3(buf []byte) (offset int) {
	if x.Output == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetOutput())
	return offset
}

func (x *CreateGroupRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *CreateGroupRequest) sizeField1() (n int) {
	if x.Version == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetVersion())
	return n
}

func (x *CreateGroupRequest) sizeField2() (n int) {
	if x.GroupId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetGroupId())
	return n
}

func (x *CreateGroupRequest) sizeField3() (n int) {
	if x.GroupOwnerId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetGroupOwnerId())
	return n
}

func (x *CreateGroupResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateGroupResponse) sizeField1() (n int) {
	if !x.Success {
		return n
	}
	n += fastpb.SizeBool(1, x.GetSuccess())
	return n
}

func (x *CreateGroupResponse) sizeField2() (n int) {
	if x.Version == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetVersion())
	return n
}

func (x *UniversalGroupEvloopRequestReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UniversalGroupEvloopRequestReq) sizeField1() (n int) {
	if x.Version == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetVersion())
	return n
}

func (x *UniversalGroupEvloopRequestReq) sizeField2() (n int) {
	if x.GroupId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetGroupId())
	return n
}

func (x *UniversalGroupEvloopRequestReq) sizeField3() (n int) {
	if x.Input == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetInput())
	return n
}

func (x *UniversalGroupEvloopRequestResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UniversalGroupEvloopRequestResp) sizeField1() (n int) {
	if !x.Success {
		return n
	}
	n += fastpb.SizeBool(1, x.GetSuccess())
	return n
}

func (x *UniversalGroupEvloopRequestResp) sizeField2() (n int) {
	if x.Version == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetVersion())
	return n
}

func (x *UniversalGroupEvloopRequestResp) sizeField3() (n int) {
	if x.Output == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetOutput())
	return n
}

var fieldIDToName_CreateGroupRequest = map[int32]string{
	1: "Version",
	2: "GroupId",
	3: "GroupOwnerId",
}

var fieldIDToName_CreateGroupResponse = map[int32]string{
	1: "Success",
	2: "Version",
}

var fieldIDToName_UniversalGroupEvloopRequestReq = map[int32]string{
	1: "Version",
	2: "GroupId",
	3: "Input",
}

var fieldIDToName_UniversalGroupEvloopRequestResp = map[int32]string{
	1: "Success",
	2: "Version",
	3: "Output",
}

var _ = base.File_base_base_proto
var _ = evloopio.File_base_evloopio_proto
